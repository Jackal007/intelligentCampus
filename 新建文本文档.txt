from numpy import *
from Model import Student

students = []
labels = ['score', 'cost_amount', 'cost_avg_superMarket', 'cost_avg_dinnerHall', 'cost_supermarket_rate', 'cost_dinner_rate', 'cost_times', 'library_borrow', 'library_times', 'library_time_spand', 'balance_rank']
 
def loadDataSet(): 
    from Tools import MyDataBase 
    db = MyDataBase.MyDataBase()
    conn = db.getConn()
    executer = db.getExcuter()
    
    # 从这边读取到所有学生的id
    sql = "select student_id,score,cost_amount,cost_avg_superMarket,cost_avg_dinnerHall,cost_supermarket_rate,cost_dinnerhall_rate,cost_times,library_borrow,library_times,library_time_spand,balance_rank,subsidy from students"
    executer.execute(sql)
    dataMat = []
    labelMat = []
    for i in executer.fetchall():
        student = Student(i)
        students.append(student)
        dataMat.append([student.getScore(), student.getCost_amount(), student.getCost_avg_superMarket(), student.getCost_avg_dinnerHall(), student.getCost_supermarket_rate(), student.getCost_dinnerhall_rate(), student.getCost_times(), student.getLibrary_borrow(), student.getLibrary_times(), student.getLibrary_time_spand(), student.getBalance_rank(), student.getSubsidy()])
        labelMat.append(student.getSubsidy())
    return dataMat, labelMat
  
def stumpClassify(dataMatrix, dimen, threshVal, threshIneq):
    '''
    dataMatrix 数据集
    dimen 划分的特征是第几个
    threshVal 阈值，该特征划分的值（小于该值的为一类，大于该值得为另一类）
    threshIneq 比较方法，比如大于或者小于
    '''
    retArray = ones((shape(dataMatrix)[0], 1))  # 弄一个全1的一列
    if threshIneq == 'lt':
        # 会把数据集（dataMatrix）中的特征值（dimen）那一列 小于阈值（threshVal）的对应retArray（全1的一列）的1改为-1
        retArray[dataMatrix[:, dimen] <= threshVal] = -1.0
    else:
        retArray[dataMatrix[:, dimen] > threshVal] = -1.0
#     print(retArray)
    return retArray


        
def buildStump(dataArr, classLabels, D):
    '''
    D是错误权值计算要用到的加权数，分类器和adaboost交互的地方
    '''
    dataMatrix = mat(dataArr); labelMat = mat(classLabels).T
    m, n = shape(dataMatrix)  # m表示有几行数据，n表示有几个特征
    numSteps = 10.0#步数
    bestStump = {};#最好的分类器，每次调用这个函数都去找错误率最小的分类器
    bestClasEst = mat(zeros((m, 1)))#分类结果，类别标签
    minError = inf  # init error sum, to +infinity
    # 对每一个特征
    for i in range(n):
        rangeMin = dataMatrix[:, i].min()  # 第i个特征下的最小值
        rangeMax = dataMatrix[:, i].max()  # 第i个特征下的最大值
        stepSize = (rangeMax - rangeMin) / numSteps  # 步长
        # 对每一个步长
        for j in range(-1, int(numSteps) + 1):
            # 对每一个不等号
            for inequal in ['lt', 'gt']:
                threshVal = (rangeMin + float(j) * stepSize)
                predictedVals = stumpClassify(dataMatrix, i, threshVal, inequal)  # call stump classify with i, j, lessThan
                errArr = mat(ones((m, 1)))
                errArr[predictedVals == labelMat] = 0
                weightedError = D.T * errArr  # calc total error multiplied by D
                # print "split: dim %d, thresh %.2f, thresh ineqal: %s, the weighted error is %.3f" % (i, threshVal, inequal, weightedError)
                if weightedError < minError:
                    minError = weightedError
                    bestClasEst = predictedVals.copy()
                    bestStump['dim'] = i
                    bestStump['thresh'] = threshVal
                    bestStump['ineq'] = inequal
    return bestStump, minError, bestClasEst
  
  
def adaBoostTrainDS(dataArr, classLabels, numIt=40):
    weakClassArr = []
    m = shape(dataArr)[0]
    D = mat(ones((m, 1)) / m)  # init D to all equal
    aggClassEst = mat(zeros((m, 1)))#储存分类结果
    for i in range(numIt):
        bestStump, error, classEst = buildStump(dataArr, classLabels, D)  # build Stump
        # 计算一些东西
        alpha = float(0.5 * log((1.0 - error) / max(error, 1e-16)))  # calc alpha, throw in max(error,eps) to account for error=0
        bestStump['alpha'] = alpha  
        weakClassArr.append(bestStump)  # store Stump Params in Array
        expon = multiply(-1 * alpha * mat(classLabels).T, classEst)  # exponent for D calc, getting messy
        D = multiply(D, exp(expon))  # Calc New D for next iteration
        D = D / D.sum()
        # calc training error of all classifiers, if this is 0 quit for loop early (use break)
        aggClassEst += alpha * classEst
        # print "aggClassEst: ",aggClassEst.T
        aggErrors = multiply(sign(aggClassEst) != mat(classLabels).T, ones((m, 1)))
        errorRate = aggErrors.sum() / m
        print ("total error: ", errorRate)
        if errorRate == 0.0: break
    return weakClassArr, aggClassEst
  
def adaClassify(datToClass, classifierArr):
    dataMatrix = mat(datToClass)  # do stuff similar to last aggClassEst in adaBoostTrainDS
    m = shape(dataMatrix)[0]
    aggClassEst = mat(zeros((m, 1)))#储存分类结果
    for i in range(len(classifierArr)):
        classEst = stumpClassify(dataMatrix, classifierArr[i]['dim'], \
                                 classifierArr[i]['thresh'], \
                                 classifierArr[i]['ineq'])  # call stump classify
        aggClassEst += classifierArr[i]['alpha'] * classEst#计算分类结果，每个弱分类器的权值不一样，大家算好后加在一起就是结果
#         print (aggClassEst)
    return sign(aggClassEst)#因为是一个浮点数，而结果是1或者-1，所以需要调用sign函数

